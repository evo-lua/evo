local httpRequestParserStates = {
	HTTP_REQUEST_EXPECT_METHOD = true,
	HTTP_REQUEST_INVALID_FORMAT = true,
	HTTP_REQUEST_EXPECT_GET_E = true,
	HTTP_REQUEST_EXPECT_GET_T = true,
	HTTP_REQUEST_EXPECT_WHITESPACE = true,
	HTTP_REQUEST_EXPECT_URL = true,
}

-- Methods
-- [x] GET
-- HEAD
-- POST
-- PUT
-- DELETE
-- CONNECT
-- OPTIONS
-- TRACE
-- PATCH

-- Request target form
-- Origin form:

local VALID_URL_CHARACTERS_PATTERN = "[A-Za-z0-9-._~:/?#[\\]@!$&'()*+,;%=]+"

local RequestParserFSM = {
	initialState = "EXPECT_NEW_REQUEST",
	stateTransitions = {
		EXPECT_NEW_REQUEST = {
			["G"] = "EXPECT_GET_METHOD_E",
		},
		EXPECT_GET_METHOD_E = {
			["E"] = "EXPECT_GET_METHOD_T"
		},
		EXPECT_GET_METHOD_T = {
			["T"] = "EXPECT_WHITESPACE_AFTER_METHOD"
		},
		EXPECT_WHITESPACE_AFTER_METHOD = {
			[" "] = "EXPECT_FIRST_URL_CHARACTER"
		},
		EXPECT_FIRST_URL_CHARACTER = {
			[VALID_URL_CHARACTERS_PATTERN] = "EXPECT_URL_CHARACTER"
		},
		EXPECT_URL_CHARACTER = {
			[VALID_URL_CHARACTERS_PATTERN] = "EXPECT_URL_CHARACTER",
			[" "] = "EXPECT_WHITESPACE_AFTER_URL",
		},
		EXPECT_WHITESPACE_AFTER_URL = {
			[" "] = "EXPECT_VERSION_STRING_H",
		},
		EXPECT_VERSION_STRING_H = {
			["H"] = "EXPECT_VERSION_STRING_FIRST_T"
		},
		EXPECT_VERSION_STRING_FIRST_T = {
			["T"] = "EXPECT_VERSION_STRING_SECOND_T"
		},
		EXPECT_VERSION_STRING_SECOND_T = {
			["T"] = "EXPECT_VERSION_STRING_P"
		},
		EXPECT_VERSION_STRING_P = {
			["P"] = "EXPECT_VERSION_STRING_SLASH"
		},
		EXPECT_VERSION_STRING_SLASH = {
			["/"] = "EXPECT_VERSION_STRING_MAJOR"
		},
		EXPECT_VERSION_STRING_MAJOR = {
			["0"] = "EXPECT_VERSION_STRING_ZERO_POINT",
			["1"] = "EXPECT_VERSION_STRING_ONE_POINT",
		},
		EXPECT_VERSION_STRING_ZERO_POINT =  {
			["."] = "EXPECT_VERSION_STRING_ZERO_NINE",
		},
		EXPECT_VERSION_STRING_ZERO_NINE =  {
			["9"] = "EXPECT_CR_AFTER_VERSION_STRING",
		},
		EXPECT_VERSION_STRING_ONE_POINT =  {
			["."] = "EXPECT_VERSION_STRING_ONE_OR_ZERO",
		},
		EXPECT_VERSION_STRING_ONE_OR_ZERO = {
			["0"] = "EXPECT_CR_AFTER_VERSION_STRING",
			["1"] = "EXPECT_CR_AFTER_VERSION_STRING",
		},
		EXPECT_CR_AFTER_VERSION_STRING = {
			["\r"] = "EXPECT_LF_AFTER_VERSION_STRING"
		},
		EXPECT_LF_AFTER_VERSION_STRING = {
			["\n"] = "EXPECT_FIRST_HEADERS_CHARACTER_OR_"
		}
	}
}

-- todo validate all state transitions are possible, no unknown states are referenced, compile list of states,

print(httpRequestParserStates)
print(RequestParserFSM)